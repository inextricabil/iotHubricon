@model iotHubricon.Models.SensorViewModel

@{
    ViewBag.Title = "Sensors";
}


@{
    <link href="~/Content/sensor-page.css" rel="stylesheet" />
}

<h2>Map</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Sensors[0].Name)
        </th>

        <th>
            @Html.DisplayNameFor(model => model.Sensors[0].SensorId)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Sensors[0].Latitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Sensors[0].Longitude)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Sensors[0].Location)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Sensors)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SensorId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Latitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Longitude)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Location)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.SensorId }) |
                @Html.ActionLink("Details", "Details", new { id = item.SensorId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.SensorId })
            </td>
        </tr>
    }

</table>

<div id="map"></div>

<script src="~/Content/moment-with-locales.min.js"></script>

<script>
    var map;
    function initMap() {

        var sensors = @Html.Raw(Json.Encode(Model.Sensors));
        var sensorsTemperatureAverages = @Html.Raw(Json.Encode(Model.TemperatureAverage));
        var sensorsHumidityAverages = @Html.Raw(Json.Encode(Model.HumidityAverage));
        var lastTemperatureRecords = @Html.Raw(Json.Encode(Model.LastTemperatureRecords));
        var lastHumidityRecords = @Html.Raw(Json.Encode(Model.LastHumidityRecords));

        debugger;


        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 12,
            center: new google.maps.LatLng(47.15845, 27.60144), //Iasi, Romania
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        var infowindow = new google.maps.InfoWindow();

        var marker, i;

        var markers = [];
        for (i = 0; i < sensors.length; i++) {
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(sensors[i]["Latitude"], sensors[i]["Longitude"]),
                map: map,
                sensorId: sensors[i].SensorId,
                lastHumidityRecords: lastHumidityRecords[sensors[i].SensorId],
                lastTemperatureRecords: lastTemperatureRecords[sensors[i].SensorId]
            });
            markers.push(marker);

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                return function () {

                    var sensorId = this.sensorId;
                    var temperatureAverage = sensorsTemperatureAverages[sensorId];
                    var humidityAverage = sensorsHumidityAverages[sensorId];


                    //var lastTemperatureRecords = [{ Value: 10, Date: "11/29/2017 3:08:36 PM" }, { Value: 22, Date: "11/29/2017 4:08:36 PM" }];
                    var lastTemperatureRecords = this.lastTemperatureRecords;
                    var lastHumidityRecords = this.lastHumidityRecords;

                    var temperatureContent = "<p>Media temperaturilor pentru ultima luna: <b>" + temperatureAverage + "&#8451 </b></p> ";
                    temperatureContent += "<p>Ultimele valori primite: </p> ";
                    temperatureContent += "<ul>"
                    for (let i = 0; i < lastTemperatureRecords.length; i++) {
                        temperatureContent += "<li><b>" +
                            specialEpochToDatetime(lastTemperatureRecords[i].Date) +
                            "</b> - Temperatura:<b> " +
                            lastTemperatureRecords[i].Value +
                            " &#8451" +
                            "</b></li>";
                    }
                    temperatureContent += "<ul>"


                    //var lastHumidityRecords = [{ Value: 50, Date: "11/29/2017 3:08:36 PM" }, { Value: 55, Date: "11/29/2017 4:08:36 PM"}];

                    var humidityContent = "<p>Media umiditatii pentru ultima luna: <b>" + humidityAverage + "% </b></p> ";
                    humidityContent += "<p>Ultimele valori primite: </p> ";
                    humidityContent += "<ul>"
                    for (let i = 0; i < lastHumidityRecords.length; i++) {
                        humidityContent += "<li><b>" + specialEpochToDatetime(lastHumidityRecords[i].Date) + "</b> - Umiditate: <b> " + lastHumidityRecords[i].Value + "% </b></li>"
                    }
                    humidityContent += "</ul>"


                    var content = "<p><b>Nume</b>: " + sensors[i]["Name"] + " </p>" +
                        "<p><b>Locatie</b>: " + sensors[i]["Location"]  + "</p> <br>"
                        +
                        "<div class=\"tab\">" +
                            "<button class=\"tablinks active\"onclick=\"openTab(event, 'Temeprature')\">Temperatura</button>" +
                            "<button class=\"tablinks\" onclick=\"openTab(event, 'Humidity')\">Umiditate</button>" +
                            "</div>" +
                            "<div id=\"Temeprature\" class=\"tabcontent\" style=\"display: block\">" +
                            "<h3>Temperatura</h3>" +
                            temperatureContent +
                            "</div>" +
                            "<div id=\"Humidity\" class=\"tabcontent\">" +
                            "<h3>Umiditate</h3>" +
                            humidityContent +
                            "</div>";


                    //infowindow.setContent("Nume: " + sensors[i]["Name"] + " Locatie: " + sensors[i]["Location"] );
                    infowindow.setContent(content);
                    infowindow.open(map, marker);

                }
            })(marker, i));
        }

        var bounds = new google.maps.LatLngBounds();
        for (var i = 0; i < markers.length; i++) {
            bounds.extend(markers[i].getPosition());
        }

        map.fitBounds(bounds);
    };

    function specialEpochToDatetime(epoch) {
        return moment(epoch).lang("ro").format('LLL');
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBUEbsvVsAnGW-dUIftVwbxlor0uQHdJcg&callback=initMap"
        async defer></script>

<script>
    function openTab(evt, tabName) {
        // Declare all variables
        var i, tabcontent, tablinks;

        // Get all elements with class="tabcontent" and hide them
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }

        // Get all elements with class="tablinks" and remove the class "active"
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }

        // Show the current tab, and add an "active" class to the button that opened the tab
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }
</script>

